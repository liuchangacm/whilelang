package lang

import java.io.InputStream
import java.io.BufferedReader
import java.io.InputStreamReader

/**
 * @author Chang Liu (liuchang@cs.umd.edu)
 */

class Lexer(is:InputStream) {
  sealed trait Token
  case class Iden(n:String) extends Token
  case class Num(n:Int) extends Token
  case object Lparen extends Token
  case object Rparen extends Token
  case object Lbracket extends Token
  case object Rbracket extends Token
  case object Lbrace extends Token
  case object Rbrace extends Token
  case object Add extends Token
  case object Sub extends Token
  case object Mul extends Token
  case object Div extends Token
  case object Eq extends Token
  case object Neq extends Token
  case object Lt extends Token
  case object Leq extends Token
  case object Gt extends Token
  case object Geq extends Token
  case object Eof extends Token
  case object Unknown extends Token
  
  var reader = new BufferedReader(new InputStreamReader(is))
  var curChar = reader.read()
  var nextChar = if(curChar >= 0) reader.read() else -1
  
  def nextIdent() = {
    Iden("")
  }
  
  def nextNum() = {
    Num(0)
  }
  
  def readNext() = {
    curChar = if(curChar >= 0) nextChar else -1
    nextChar = if(curChar >= 0) reader.read() else -1
  }
  
  def nextToken():Token = {
    if (curChar < 0)
      Eof
    else {
      curChar match {
        case 'a' 
           | 'b'
           | 'c'
           | 'd'
           | 'e'
           | 'f'
           | 'g'
           | 'h'
           | 'i'
           | 'j'
           | 'k'
           | 'l'
           | 'm'
           | 'n'
           | 'o'
           | 'p'
           | 'q'
           | 'r'
           | 's'
           | 't'
           | 'u'
           | 'v'
           | 'w'
           | 'x'
           | 'y'
           | 'z'
           | 'A'
           | 'B'
           | 'C'
           | 'D'
           | 'E'
           | 'F'
           | 'G'
           | 'H'
           | 'I'
           | 'J'
           | 'K'
           | 'L'
           | 'M'
           | 'N'
           | 'O'
           | 'P'
           | 'Q'
           | 'R'
           | 'S'
           | 'T'
           | 'U'
           | 'V'
           | 'W'
           | 'X'
           | 'Y'
           | 'Z' 
           | '_' => nextIdent()
        case '0'
           | '1'
           | '2'
           | '3'
           | '4'
           | '5'
           | '6'
           | '7'
           | '8'
           | '9' => nextNum()
        case ' '
           | '\t'
           | '\r'
           | '\n' => { readNext(); nextToken() }
        case '(' => Lparen
        case ')' => Rparen
        case '[' => Lbracket
        case ']' => Rbracket
        case '{' => Lbrace
        case '}' => Rbrace
        case '+' => Add
        case '-' => Sub
        case '*' => Mul
        case '/' => Div
        case '=' => Eq
        case '!' => {
          readNext()
          if (curChar == '=') {
            Neq
          } else {
            
          }
        }
        case '+' => Add
  case object Sub extends Token
  case object Mul extends Token
  case object Div extends Token
  case object Eq extends Token
  case object Neq extends Token
  case object Lt extends Token
  case object Leq extends Token
  case object Gt extends Token
  case object Geq extends Token
  case object Eof extends Token
  case object Unknown extends Token
      }
    }
  }
}

object Parser {
  
}