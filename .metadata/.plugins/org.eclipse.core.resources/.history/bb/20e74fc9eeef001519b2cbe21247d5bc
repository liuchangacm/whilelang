/**
 * Copyright Chang Liu (liuchang@cs.umd.edu)
 */
package lang

/**
 * @author Chang Liu (liuchang@cs.umd.edu)
 */
trait Ast {
  override def toString = Formatter.toString(0, this)
}
sealed trait Stat extends Ast 
sealed trait Expr extends Ast

case object Skip extends Stat 
case class Assign(v:String, e:Expr) extends Stat 
case class Seq(s1:Stat, s2:Stat) extends Stat 
case class If(cond:Expr, tbranch:Stat, fbranch:Stat) extends Stat 
case class While(cond:Expr, body:Stat) extends Stat
case class In(v:String) extends Stat
case class Out(e:Expr) extends Stat

case class Var(v:String) extends Expr {
  override def toString = v
}
case class Const(n:Int) extends Expr
case class Op(e1:Expr, op:Bop, e2:Expr) extends Expr 
case class UnaryOp(op:Uop, e:Expr) extends Expr }

sealed trait Bop
case object Add extends Bop {
  override def toString = "+"
}
case object Sub extends Bop {
  override def toString = "-"
}
case object Mul extends Bop {
  override def toString = "*"
}
case object Div extends Bop {
  override def toString = "/"
}

case object Eq extends Bop {
  override def toString = "="
}
case object Ne extends Bop {
  override def toString = "!="
}
case object Lt extends Bop {
  override def toString = "<"
}
case object Gt extends Bop {
  override def toString = ">"
}
case object Leq extends Bop {
  override def toString = "<="
}
case object Geq extends Bop {
  override def toString = ">="
}

case object And extends Bop {
  override def toString = "/\\"
}
case object Or extends Bop {
  override def toString = "\\/"
}

sealed trait Uop

case object Not extends Uop {
  override def toString = "!"
}
case object Neg extends Uop {
  override def toString = "-"
}
